9:52 pm 14/06/2022


Running scratch tester...
Enter target IP: 192.168.24.253
Enter target port: 69



================================================
========THIS IS THE PACKET ASSEMBLY ZONE========
================================================



Data Packet
System: 
System Hex from Processed Byte: 030ffffffa1ffffff9452ffffffd1409452d140ffffff9452ffffffd1409452d140ffffff9452ffffffd1409452d140ffffff9452ffffffd1409452d140ffffff9452ffffffd1409452d141ffffffffffffffd9
System Bits: 00000011 00001111 11111111 11111111 11111010 00011111 11111111 11111111 11111001 01000101 00101111 11111111 11111111 11111101 00010100 00001001 01000101 00101101 00010100 00001111 11111111 11111111 11111001 01000101 00101111 11111111 11111111 11111101 00010100 00001001 01000101 00101101 00010100 00001111 11111111 11111111 11111001 01000101 00101111 11111111 11111111 11111101 00010100 00001001 01000101 00101101 00010100 00001111 11111111 11111111 11111001 01000101 00101111 11111111 11111111 11111101 00010100 00001001 01000101 00101101 00010100 00001111 11111111 11111111 11111001 01000101 00101111 11111111 11111111 11111101 00010100 00001001 01000101 00101101 00010100 00011111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 
Wireshark: 
Wireshark Hex Raw: 000300a19452d14009452d14009452d14009452d14009452d14009452d14009452d14009452d14009452d14009452d1401ffd9
Wireshark Bits: 00000000 00000011 00000000 10100001 10010100 01010010 11010001 01000000 00001001 01000101 00101101 00010100 00000000 10010100 01010010 11010001 01000000 00001001 01000101 00101101 00010100 00000000 10010100 01010010 11010001 01000000 00001001 01000101 00101101 00010100 00000000 10010100 01010010 11010001 01000000 00001001 01000101 00101101 00010100 00000000 10010100 01010010 11010001 01000000 00001001 01000101 00101101 00010100 00000001 11111111 11011001 



WRQ Packet Without Opts & Vals
System: 
System Hex from Processed Byte: 02746573742e706e6706f637465740
System Bits: 00000010 01110100 01100101 01110011 01110100 00101110 01110000 01101110 01100111 00000110 11110110 00110111 01000110 01010111 01000000 
Wireshark: 
Wireshark Hex Raw: 0002746f74655f74696c742e6a7067006f6374657400
RQHasOACK: false
Wireshark Bits: 00000000 00000010 01110100 01101111 01110100 01100101 01011111 01110100 01101001 01101100 01110100 00101110 01101010 01110000 01100111 00000000 01101111 01100011 01110100 01100101 01110100 00000000 



WRQ Packet
System: 
System Hex from Processed Byte: 02746573742e706e6706f6374657407473697a65038313936370
System Bits: 00000010 01110100 01100101 01110011 01110100 00101110 01110000 01101110 01100111 00000110 11110110 00110111 01000110 01010111 01000000 01110100 01110011 01101001 01111010 01100101 00000011 10000011 00010011 10010011 01100011 01110000 
Wireshark: 
Wireshark Hex Raw: 0002746f74655f74696c742e6a7067006f63746574007473697a6500383139363700
RQHasOACK: true
extractOACKFromRQ: {tsize}, {81967}
Wireshark Bits: 00000000 00000010 01110100 01101111 01110100 01100101 01011111 01110100 01101001 01101100 01110100 00101110 01101010 01110000 01100111 00000000 01101111 01100011 01110100 01100101 01110100 00000000 01110100 01110011 01101001 01111010 01100101 00000000 00111000 00110001 00111001 00110110 00110111 00000000 



RRQ Packet Without Opts & Vals
System: 
System Hex from Processed Byte: 016e656e656368692e706e6706f637465740
System Bits: 00000001 01101110 01100101 01101110 01100101 01100011 01101000 01101001 00101110 01110000 01101110 01100111 00000110 11110110 00110111 01000110 01010111 01000000 
Wireshark: 
Wireshark Hex Raw: 00016e656e656368692e706e67006f6374657400
RQHasOACK: false
Wireshark Bits: 00000000 00000001 01101110 01100101 01101110 01100101 01100011 01101000 01101001 00101110 01110000 01101110 01100111 00000000 01101111 01100011 01110100 01100101 01110100 00000000 



RRQ Packet
System: 
System Hex from Processed Byte: 016e656e656368692e706e6706f6374657407473697a650300
System Bits: 00000001 01101110 01100101 01101110 01100101 01100011 01101000 01101001 00101110 01110000 01101110 01100111 00000110 11110110 00110111 01000110 01010111 01000000 01110100 01110011 01101001 01111010 01100101 00000011 00000000 
Wireshark: 
Wireshark Hex Raw: 00016e656e656368692e706e67006f63746574007473697a65003000
Wireshark Bits: 00000000 00000001 01101110 01100101 01101110 01100101 01100011 01101000 01101001 00101110 01110000 01101110 01100111 00000000 01101111 01100011 01110100 01100101 01110100 00000000 01110100 01110011 01101001 01111010 01100101 00000000 00110000 00000000 
RQHasOACK: true
extractOACKFromRQ: {tsize}, {0}



OACK Packet
System: 
System Hex from Processed Byte: 067473697a65038313936370
System Bits: 00000110 01110100 01110011 01101001 01111010 01100101 00000011 10000011 00010011 10010011 01100011 01110000 
Wireshark: 
Wireshark Hex Raw: 00067473697a6500383139363700
Wireshark Bits: 00000000 00000110 01110100 01110011 01101001 01111010 01100101 00000000 00111000 00110001 00111001 00110110 00110111 00000000 
extractOACK: {tsize}, {81967}



ACK Packet
System: 
System Hex from Processed Byte: 04054
System Bits: 00000100 00000101 
Wireshark: 
Wireshark Hex Raw: 00040054
Wireshark Bits: 00000000 00000100 00000000 01010100 
isACK: true
extractACK: Block 84



Data Packet
System: 
System Hex from Processed Byte: 030168656c6c6f20776f726c64
System Bits: 00000011 00000001 01101000 01100101 01101100 01101100 01101111 00100000 01110111 01101111 01110010 01101100 01100100 
Wireshark: 
Wireshark Hex Raw: 0003000168656c6c6f20776f726c64
Wireshark Bits: 00000000 00000011 00000000 00000001 01101000 01100101 01101100 01101100 01101111 00100000 01110111 01101111 01110010 01101100 01100100 
getOpCode: 3
Extract Data: 01101000 01100101 01101100 01101100 01101111 00100000 01110111 01101111 01110010 01101100 01100100 



Error Packet
System: 
System Hex from Processed Byte: 05000146696c65206e6f7420666f756e640000
System Bits: 00000101 00000000 00000001 01000110 01101001 01101100 01100101 00100000 01101110 01101111 01110100 00100000 01100110 01101111 01110101 01101110 01100100 00000000 00000000 
Wireshark: 
Wireshark Hex Raw: 0005000146696c65206e6f7420666f756e640000
Wireshark Bits: 00000000 00000101 00000000 00000001 01000110 01101001 01101100 01100101 00100000 01101110 01101111 01110100 00100000 01100110 01101111 01110101 01101110 01100100 00000000 00000000 
isError: true
Extract Error: 1 = File not found



Extract Block Number
Hex Raw: 0003000168656c6c6f20776f726c64
Bits: 00000000 00000011 00000000 00000001 01101000 01100101 01101100 01101100 01101111 00100000 01110111 01101111 01110010 01101100 01100100 
Expected output: 1
System Result Block#: 1



========================================
========THIS IS THE NETWORK ZONE========
========================================



(2022/06/14 21:52:08) FileHandlers.FileHandlers(): Default constructor
Target details: [192.168.24.253, 69]
(2022/06/14 21:52:08) Client.Client(host,port,BUFFER_SIZE): Building Client as 192.168.24.253:69...
(2022/06/14 21:52:08) Client.Client(host,port,BUFFER_SIZE): Building Client as 192.168.24.253:69 successful.
(2022/06/14 21:52:08) Client.targetIsOnline(target): Pinging 192.168.24.253...
(2022/06/14 21:52:08) Client.targetIsOnline(target): target: 192.168.24.253 is reachable.
Target is online: true
File Details: test.png with size: 4420
Writing To Server...
(2022/06/14 21:52:08) Client.send(f,opts,vals): Connecting...
(2022/06/14 21:52:08) Client.openConnection(): Opening connection...
(2022/06/14 21:52:08) Client.openConnection(): Creating DatagramSocket()...
(2022/06/14 21:52:08) Client.openConnection(): Socket connected!
(2022/06/14 21:52:08) Client.getConnectionDetails(socket): Getting socket connection details...
(2022/06/14 21:52:08) Client.openConnection(): Socket: 192.168.24.252:61000 <==> 192.168.24.253:69
(2022/06/14 21:52:08) Client.targetIsOnline(target): Pinging 192.168.24.253...
(2022/06/14 21:52:08) Client.targetIsOnline(target): target: 192.168.24.253 is reachable.
(2022/06/14 21:52:08) Client.openConnection(): Checking if target is online: true
(2022/06/14 21:52:08) Client.send(f,opts,vals): File exists and client is connected
(2022/06/14 21:52:08) Client.isConnected(): true
(2022/06/14 21:52:08) Client.askWritePermission(f,opts,vals): Building write request packet...
(2022/06/14 21:52:08) Client.askWritePermission(f,opts,vals): Sending packet from 61000 to /192.168.24.253:69...
(2022/06/14 21:52:08) Client.askWritePermission(f,opts,vals): Receiving OACK packet to: 61000...
(2022/06/14 21:52:08) Client.askWritePermission(f,opts,vals): Trimming OACK packet...
(2022/06/14 21:52:08) Client.askWritePermission(f,opts,vals): isOACK and !isError
(2022/06/14 21:52:08) Client.askWritePermission(f,opts,vals): Checking matches...
(2022/06/14 21:52:08) Client.askWritePermission(f,opts,vals): Sent opts: [tsize]
(2022/06/14 21:52:08) Client.askWritePermission(f,opts,vals): Sent vals: [4420]
(2022/06/14 21:52:08) Client.askWritePermission(f,opts,vals): OACK opts: [tsize]
(2022/06/14 21:52:08) Client.askWritePermission(f,opts,vals): OACK vals: [4420]
(2022/06/14 21:52:08) Client.askWritePermission(f,opts,vals): Matched @ 4420
(2022/06/14 21:52:08) Client.send(f,opts,vals): Write Permission Accepted!
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): f.exists()...
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): Checking if still connected...
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): SIZE: 4420, BUFFER_SIZE: 512
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): Sending file to target...
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): isACK: true, isError: true
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): ACK Block#: 1 = 1, Remaining bytes: 3908
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): isACK: true, isError: true
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): ACK Block#: 2 = 2, Remaining bytes: 3396
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): isACK: true, isError: true
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): ACK Block#: 3 = 3, Remaining bytes: 2884
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): isACK: true, isError: true
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): ACK Block#: 4 = 4, Remaining bytes: 2372
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): isACK: true, isError: true
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): ACK Block#: 5 = 5, Remaining bytes: 1860
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): isACK: true, isError: true
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): ACK Block#: 6 = 6, Remaining bytes: 1348
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): isACK: true, isError: true
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): ACK Block#: 7 = 7, Remaining bytes: 836
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): isACK: true, isError: true
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): ACK Block#: 8 = 8, Remaining bytes: 324
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): Buffersize adjusted to: 324
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): isACK: true, isError: true
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): ACK Block#: 9 = 9, Remaining bytes: 0
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): Buffersize adjusted to: 0
(2022/06/14 21:52:08) Client.writeToServer(f,opts,vals): Closing stream...
(2022/06/14 21:52:08) Client.closeConnection(): Closing connection...
(2022/06/14 21:52:08) Client.closeConnection(): true
(2022/06/14 21:52:08) Client.reset()
Write to server successful



File Details: test.png
Reading From Server...
(2022/06/14 21:52:08) Client.openConnection(): Opening connection...
(2022/06/14 21:52:08) Client.openConnection(): Creating DatagramSocket()...
(2022/06/14 21:52:08) Client.openConnection(): Socket connected!
(2022/06/14 21:52:08) Client.getConnectionDetails(socket): Getting socket connection details...
(2022/06/14 21:52:08) Client.openConnection(): Socket: 192.168.24.252:61000 <==> 192.168.24.253:69
(2022/06/14 21:52:08) Client.targetIsOnline(target): Pinging 192.168.24.253...
(2022/06/14 21:52:08) Client.targetIsOnline(target): target: 192.168.24.253 is reachable.
(2022/06/14 21:52:08) Client.openConnection(): Checking if target is online: true
(2022/06/14 21:52:08) Client.isConnected(): true
(2022/06/14 21:52:08) Client.askReadPermission(filename,opts,vals): Building write request packet...
(2022/06/14 21:52:08) Client.askReadPermission(filename,opts,vals): Sending packet from 61000 to /192.168.24.253:69...
(2022/06/14 21:52:08) Client.askReadPermission(filename,opts,vals): Receiving OACK packet to: 61000...
(2022/06/14 21:52:08) Client.askReadPermission(filename,opts,vals): Trimming OACK packet...
(2022/06/14 21:52:08) Client.askReadPermission(filename,opts,vals): isOACK: true, isError: true
(2022/06/14 21:52:08) Client.askReadPermission(filename,opts,vals): isOACK and !isError
(2022/06/14 21:52:08) Client.askReadPermission(filename,opts,vals): Checking matches...
(2022/06/14 21:52:08) Client.askReadPermission(filename,opts,vals): Sent opts: [tsize]
(2022/06/14 21:52:08) Client.askReadPermission(filename,opts,vals): Sent vals: [0]
(2022/06/14 21:52:08) Client.askReadPermission(filename,opts,vals): OACK opts: [tsize]
(2022/06/14 21:52:08) Client.askReadPermission(filename,opts,vals): OACK vals: [4420]
(2022/06/14 21:52:08) Client.askReadPermission(filename,opts,vals): Server's tsize: 4420
(2022/06/14 21:52:08) Client.receive(filename, saveAs, opts, vals): Returned tsize of test.png = 4420bytes
(2022/06/14 21:52:08) Client.readFromServer(): Receiving file from target...
(2022/06/14 21:52:11) Client.readFromServer(): Exception: Receive timed out
(2022/06/14 21:52:13) Client.closeConnection(): Closing connection...
(2022/06/14 21:52:13) Client.closeConnection(): true
(2022/06/14 21:52:13) Client.reset()
Read to server failed
Testing time elapsed: 4.0seconds